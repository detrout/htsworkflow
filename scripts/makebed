#!/usr/bin/python
import optparse
import sys
import os

from gaworkflow.util.makebed import make_bed_from_eland_stream, make_description

def make_parser():
  parser = optparse.OptionParser()
  parser.add_option('-e', '--eland', dest='inname',
                    help='specify input eland filename')
  parser.add_option('-b', '--bed', dest='outname',
                    help='specify output befilename')
  parser.add_option('-n', '--name', dest='name',
                    help='specify the track (short) name.',
                    default=None)
  parser.add_option('-d', '--description', dest='description',
                    help='specify the track description',
                    default=None)
  parser.add_option('--chromosome', dest='prefix',
                    help='Set the chromosome prefix name. defaults to "chr"',
                    default='chr')
  parser.add_option("--database", dest='database',
                    help="specify location of fctracker database",
                    default=None)
  parser.add_option("--flowcell", dest='flowcell',
                    help="compute name and description from database using flowcell id",
                    default=None)
  parser.add_option("--lane", dest='lane',
                    help='specify which lane to use when retrieving description from database',
                    default=None)
  return parser

def main(command_line=None):
  if command_line is None:
    command_line = sys.argv[1:]

  parser = make_parser()
  (options, args) = parser.parse_args(command_line)

  if options.inname is None:
    parser.error("Need eland input file name")
    return 1

  if options.outname is None:
    options.outname = os.path.splitext(options.inname)[0]+'.bed'
    print >>sys.stderr, "defaulting to outputname", options.outname

  if os.path.exists(options.inname):
    instream = open(options.inname, 'r')
  else:
    parser.error('%s was not found' % (options.inname))
    return 1

  if os.path.exists(options.outname):
      parser.error("not overwriting %s" % (options.outname))
      return 1
  else:
    outstream = open(options.outname, 'w')

  if options.flowcell is not None and options.lane is not None:
    # get our name/description out of the database
    name, description = make_description(
                           options.database, options.flowcell, options.lane
                        )
  else:
    name = options.name
    description = options.description

  print name, description
  #make_bed_from_eland_stream(instream, outstream, name, description, options.prefix)
  return 0

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))

